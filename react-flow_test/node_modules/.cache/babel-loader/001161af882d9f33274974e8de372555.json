{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438\\\\Scada-react-flow-main\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, Controls, ReactFlowProvider, MiniMap, useZoomPanHelper } from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport LoadingJson from './LoadingJSON';\nimport { nodeTypes } from './Nodes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = new WebSocket('ws://localhost:5000/');\nlocalforage.config({\n  name: 'react-flow-docs',\n  storeName: 'flows'\n});\n\nconst ReactFlowRenderer = () => {\n  _s();\n\n  const [elements, setElements] = useState([]);\n\n  function loadJSON(callback) {\n    var xobj = new XMLHttpRequest();\n    xobj.overrideMimeType(\"application/json\");\n    xobj.open('GET', 'my_data.json', true); // Replace 'my_data' with the path to your file\n\n    xobj.onreadystatechange = function () {\n      if (xobj.readyState == 4 && xobj.status == \"200\") {\n        // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n        callback(xobj.responseText);\n      }\n    };\n\n    xobj.send(null);\n  } // ------------------- Экспорт в Excel ------------------\n\n\n  const fileName = 'Scada';\n  const [name, setName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState();\n  const {\n    transform\n  } = useZoomPanHelper();\n  const flowKey = 'example-flow';\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]); // --------------- Сохранение в локальном хранилище ---------------\n\n  const onSave = useCallback(() => {\n    if (instance) {\n      const flow = instance.toObject();\n      localforage.setItem(flowKey, flow);\n      console.log(\"Объекты сохранены\");\n    }\n  }, [instance]); // --------------- Загрузка ---------------\n\n  const onRestore = useCallback(() => {\n    const restoreFlow = async () => {\n      const flow = await localforage.getItem(flowKey);\n\n      if (flow) {\n        const [x = 0, y = 0] = flow.position;\n        setElements(flow.elements || []);\n        transform({\n          x,\n          y,\n          zoom: flow.zoom || 0\n        });\n      }\n    };\n\n    restoreFlow();\n  }, [setElements, transform]);\n\n  function openFile() {\n    document.getElementById('inp').click();\n  } // function readFile(e) {\n  //     var file = e.target.files[0];\n  //     if (!file) return;\n  //     var reader = new FileReader();\n  //     reader.onload = function (e) {\n  //         document.getElementById('contents').innerHTML = e.target.result;\n  //     }\n  //     reader.readAsText(file)\n  // }\n  // --------------- Сохранение через локальный диск ---------------\n\n\n  const exportToJson = () => {\n    let filename = \"Scada-systems.json\";\n    let contentType = \"application/json;charset=utf-8;\";\n\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], {\n        type: contentType\n      });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      var a = document.createElement('a');\n      a.download = filename;\n      a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements));\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  }; // --------------- Удаление ---------------\n\n\n  const elementRemoveHandler = elementTobeRemoved => {\n    setElements(prev => removeElements(elementTobeRemoved, prev));\n  };\n\n  const connectHandler = params => {\n    setElements(els => addEdge({ ...params,\n      type: 'step',\n      style: {\n        stroke: 'red'\n      }\n    }, els));\n  }; // ----------------------- Добавление элементов --------------------------\n\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"pump\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addCircleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"circle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addFlagHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"flag\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addControlUnit = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"controlunit\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // ------------------- Добавление независимой задвижки ----------------\n\n\n  const addIndGateValveHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"indgatevalve\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // ------------------- Добавление задвижки ----------------\n\n\n  const addGateValveHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalve\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerRight = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalveright\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerBot = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalvebot\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerLeft = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalveleft\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // -----------------------------------\n\n\n  const addTextHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"text\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n  const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els)); // --------------- Приближении при двойном нажатии на мышь ---------------\n\n\n  const clickHandler = e => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 15;\n    const currentId = htmlString.substr(index, 13);\n    elements.forEach(_current => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    }); // setNewName(activeNode.data.label)\n  }; // --------------- Обновление текста ---------------\n\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(elements.map(_current => {\n      if (_current.id === activeNode.id) {\n        return { ..._current,\n          data: {\n            label: newName,\n            id: _current.data.id\n          }\n        };\n      }\n\n      return _current;\n    }));\n  };\n\n  const onLoad = reactFlowInstance => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  }; // --------------- Сохранение через сервер ---------------\n  // //save pos\n  // const saveChangesHandler = () => {\n  //     console.log(\"state\", instance.getElements());\n  //     //отправка json\n  //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\n  //     var pos = JSON.stringify(instance.getElements());\n  //     socket.send(pos);\n  // };\n  // socket.onopen = () => {\n  //     console.log('подключено');\n  // }\n  // socket.onmessage = (event) => {\n  //     console.log('есть сообщение')\n  //     const dataSave = JSON.parse(JSON.stringify(event.data));\n  //     console.log(dataSave)\n  // }\n  // // --------------- Загрузка ---------------\n  // const onRestoreJson = useCallback(() => {\n  //     const restoreJson = async (event) => {\n  //         const flow = JSON.parse(event.data);\n  //         if (flow) {\n  //             const [x = 0, y = 0] = flow.position;\n  //             setElements(flow.elements || []);\n  //             transform({ x, y, zoom: flow.zoom || 0 });\n  //             console.log(\"Загрузка прошла\")\n  //         }\n  //         else {\n  //             console.log(\"Загрузка не прошла\")\n  //         }\n  //     };\n  //     restoreJson();\n  // }, [setElements, transform]\n  // );\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"75vw\",\n      border: \"1px solid black\",\n      marginLeft: \"14.7em\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onElementsRemove: elementRemoveHandler,\n      onConnect: connectHandler,\n      deleteKeyCode: 8 || 46,\n      onEdgeUpdate: edgeUpdateHandler,\n      nodeTypes: nodeTypes,\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      connectionLineStyle: {\n        stroke: \"red\",\n        type: 'step',\n        strokeWidth: 2\n      } // При двойном нажатии  на мышку приближает \n      ,\n      onDoubleClick: clickHandler,\n      onLoad: onLoad,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 15,\n        size: 2,\n        color: \"#c8c8c8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0442\\u0435\\u043A\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTextHandler,\n        children: \"\\u0422\\u0435\\u043A\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(ExportCSV, {\n          csvData: elements,\n          fileName: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addIndGateValveHandler,\n        className: \"IndZadv\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandler,\n        className: \"Zadv\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerRight,\n        className: \"Zadv-Right\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerBot,\n        className: \"Zadv-Bot\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerLeft,\n        className: \"Zadv-Left\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addRectangleHandler,\n        className: \"Cistern\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png\",\n          alt: \"\\u0426\\u0438\\u0441\\u0442\\u0435\\u0440\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addCircleHandler,\n        className: \"Regul\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\",\n          alt: \"\\u0420\\u0435\\u0433\\u0443\\u043B\\u044F\\u0442\\u043E\\u0440\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addFlagHandler,\n        className: \"Flaaag\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\",\n          alt: \"\\u0424\\u043B\\u0430\\u0433\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addControlUnit,\n        className: \"Untitled\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\",\n          alt: \"Untitled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: updateNodeHandler,\n        children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onRestore,\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSave,\n        children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: exportToJson,\n        children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactFlowRenderer, \"vFXcmnYGPVXaQ3knY8wMO2PG8Rs=\", false, function () {\n  return [useZoomPanHelper];\n});\n\n_c = ReactFlowRenderer;\nexport default (() => /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n  children: /*#__PURE__*/_jsxDEV(ReactFlowRenderer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 590,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 589,\n  columnNumber: 5\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"sources":["E:/Загрузки/Scada-react-flow-main/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","useCallback","ExportCSV","ReactFlow","removeElements","updateEdge","addEdge","Background","Controls","ReactFlowProvider","MiniMap","useZoomPanHelper","localforage","LoadingJson","nodeTypes","socket","WebSocket","config","name","storeName","ReactFlowRenderer","elements","setElements","loadJSON","callback","xobj","XMLHttpRequest","overrideMimeType","open","onreadystatechange","readyState","status","responseText","send","fileName","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","transform","flowKey","data","label","onSave","flow","toObject","setItem","console","log","onRestore","restoreFlow","getItem","x","y","position","zoom","openFile","document","getElementById","click","exportToJson","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","createElement","download","href","encodeURIComponent","target","body","appendChild","removeChild","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","els","style","stroke","addRectangleHandler","newNode","id","Date","now","addCircleHandler","addFlagHandler","addControlUnit","addIndGateValveHandler","addGateValveHandler","addGateValveHandlerRight","addGateValveHandlerBot","addGateValveHandlerLeft","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","e","htmlString","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","height","width","border","marginLeft","strokeWidth","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\"\nimport ReactFlow, {\n    removeElements,\n    updateEdge,\n    addEdge,\n    Background,\n    Controls,\n    ReactFlowProvider,\n    MiniMap,\n    useZoomPanHelper\n} from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport LoadingJson from './LoadingJSON';\nimport { nodeTypes } from './Nodes';\nconst socket = new WebSocket('ws://localhost:5000/')\n\nlocalforage.config({\n    name: 'react-flow-docs',\n    storeName: 'flows',\n});\n\n\n\n\n\n\nconst ReactFlowRenderer = () => {\n    const [elements, setElements] = useState([]);\n\n\n\n    function loadJSON(callback) {\n\n        var xobj = new XMLHttpRequest();\n        xobj.overrideMimeType(\"application/json\");\n        xobj.open('GET', 'my_data.json', true); // Replace 'my_data' with the path to your file\n        xobj.onreadystatechange = function () {\n            if (xobj.readyState == 4 && xobj.status == \"200\") {\n                // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n                callback(xobj.responseText);\n            }\n        };\n        xobj.send(null);\n    }\n\n    // ------------------- Экспорт в Excel ------------------\n\n    const fileName = 'Scada'\n\n    const [name, setName] = useState(\"\");\n    const [activeNode, setActiveNode] = useState();\n    const [newName, setNewName] = useState(\"\");\n    const [instance, setInstance] = useState();\n    const { transform } = useZoomPanHelper();\n\n\n    const flowKey = 'example-flow';\n\n    useEffect(() => {\n        if (activeNode) setNewName(activeNode.data.label);\n    }, [activeNode]);\n\n\n    // --------------- Сохранение в локальном хранилище ---------------\n\n    const onSave = useCallback(() => {\n\n        if (instance) {\n            const flow = instance.toObject();\n            localforage.setItem(flowKey, flow);\n            console.log(\"Объекты сохранены\")\n        }\n\n    }, [instance]);\n\n\n\n    // --------------- Загрузка ---------------\n\n    const onRestore = useCallback(() => {\n        const restoreFlow = async () => {\n            const flow = await localforage.getItem(flowKey);\n\n\n            if (flow) {\n                const [x = 0, y = 0] = flow.position;\n                setElements(flow.elements || []);\n                transform({ x, y, zoom: flow.zoom || 0 });\n            }\n\n        };\n        restoreFlow();\n    }, [setElements, transform]\n\n    );\n\n\n\n    function openFile() {\n        document.getElementById('inp').click();\n    }\n\n    // function readFile(e) {\n    //     var file = e.target.files[0];\n    //     if (!file) return;\n    //     var reader = new FileReader();\n    //     reader.onload = function (e) {\n    //         document.getElementById('contents').innerHTML = e.target.result;\n    //     }\n    //     reader.readAsText(file)\n    // }\n\n\n\n    // --------------- Сохранение через локальный диск ---------------\n\n\n    const exportToJson = () => {\n        let filename = \"Scada-systems.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n            var blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], { type: contentType });\n            navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n            var a = document.createElement('a');\n            a.download = filename;\n            a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements));\n            a.target = '_blank';\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n        }\n    }\n\n\n    // --------------- Удаление ---------------\n\n\n    const elementRemoveHandler = (elementTobeRemoved) => {\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\n    };\n\n\n    const connectHandler = (params) => {\n        setElements((els) =>\n            addEdge({ ...params, type: 'step', style: { stroke: 'red' } }, els))\n    };\n\n\n\n\n    // ----------------------- Добавление элементов --------------------------\n\n    const addRectangleHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"pump\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n    const addCircleHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"circle\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n    const addFlagHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"flag\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addControlUnit = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"controlunit\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // ------------------- Добавление независимой задвижки ----------------\n\n    const addIndGateValveHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"indgatevalve\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // ------------------- Добавление задвижки ----------------\n\n    const addGateValveHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalve\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerRight = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalveright\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerBot = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalvebot\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerLeft = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalveleft\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // -----------------------------------\n\n    const addTextHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"text\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n\n\n    // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n\n\n    // --------------- Приближении при двойном нажатии на мышь ---------------\n\n    const clickHandler = (e) => {\n        var htmlString = e.target.outerHTML.toString();\n        var index = htmlString.indexOf(` id=\"`);\n        index += 15;\n        const currentId = htmlString.substr(index, 13);\n\n        elements.forEach((_current) => {\n            if (_current.id === currentId) {\n                setActiveNode(_current);\n            }\n        });\n        // setNewName(activeNode.data.label)\n    };\n\n\n    // --------------- Обновление текста ---------------\n\n    const updateNodeHandler = () => {\n        if (!activeNode) return;\n        setElements(\n            elements.map((_current) => {\n                if (_current.id === activeNode.id) {\n                    return {\n                        ..._current,\n                        data: { label: newName, id: _current.data.id }\n                    };\n                }\n\n                return _current;\n            })\n        );\n    };\n\n    const onLoad = (reactFlowInstance) => {\n        setInstance(reactFlowInstance);\n        reactFlowInstance.fitView();\n    };\n\n\n\n\n    // --------------- Сохранение через сервер ---------------\n\n\n    // //save pos\n    // const saveChangesHandler = () => {\n    //     console.log(\"state\", instance.getElements());\n    //     //отправка json\n\n    //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\n    //     var pos = JSON.stringify(instance.getElements());\n    //     socket.send(pos);\n    // };\n\n    // socket.onopen = () => {\n    //     console.log('подключено');\n    // }\n\n    // socket.onmessage = (event) => {\n    //     console.log('есть сообщение')\n    //     const dataSave = JSON.parse(JSON.stringify(event.data));\n    //     console.log(dataSave)\n    // }\n\n\n\n    // // --------------- Загрузка ---------------\n\n    // const onRestoreJson = useCallback(() => {\n    //     const restoreJson = async (event) => {\n\n    //         const flow = JSON.parse(event.data);\n\n\n    //         if (flow) {\n    //             const [x = 0, y = 0] = flow.position;\n    //             setElements(flow.elements || []);\n    //             transform({ x, y, zoom: flow.zoom || 0 });\n    //             console.log(\"Загрузка прошла\")\n    //         }\n\n\n    //         else {\n    //             console.log(\"Загрузка не прошла\")\n    //         }\n\n    //     };\n    //     restoreJson();\n    // }, [setElements, transform]\n\n    // );\n\n\n    return (\n        <div\n            style={{\n                height: \"75vh\",\n                width: \"75vw\",\n                border: \"1px solid black\",\n                marginLeft: \"14.7em\"\n            }}\n        >\n            <ReactFlow\n                elements={elements}\n                onElementsRemove={elementRemoveHandler}\n                onConnect={connectHandler}\n                deleteKeyCode={8 || 46}\n                onEdgeUpdate={edgeUpdateHandler}\n                nodeTypes={nodeTypes}\n                snapToGrid={true}\n                snapGrid={[16, 16]}\n                connectionLineStyle={{ stroke: \"red\", type: 'step', strokeWidth: 2 }}\n                // При двойном нажатии  на мышку приближает \n                onDoubleClick={clickHandler}\n                onLoad={onLoad}\n            >\n                <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\n\n                <Controls />\n            </ReactFlow>\n\n            <div className='Buttons'>\n                <input\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    type=\"text\"\n                    placeholder=\"Введите текст\"\n                />\n\n                <button type=\"button\" onClick={addTextHandler}>\n                    Текст\n                </button>\n\n                <button >\n                    <ExportCSV csvData={elements} fileName={fileName} />\n                </button>\n\n            </div>\n\n            <div className='Buttons'>\n\n\n                <button type=\"button\" onClick={addIndGateValveHandler} className=\"IndZadv\">\n                    <img src=\"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandler} className=\"Zadv\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerRight} className=\"Zadv-Right\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerBot} className=\"Zadv-Bot\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerLeft} className=\"Zadv-Left\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addRectangleHandler} className=\"Cistern\">\n                    <img src='https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png' alt='Цистерна'></img>\n                </button>\n\n\n                <button type=\"button\" onClick={addCircleHandler} className=\"Regul\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\" alt='Регулятор'></img>\n                </button>\n\n                <button type=\"button\" onClick={addFlagHandler} className=\"Flaaag\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\" alt='Флаг'></img>\n                </button>\n\n                <button type=\"button\" onClick={addControlUnit} className=\"Untitled\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\" alt='Untitled'></img>\n                </button>\n            </div>\n\n            <div className='Buttons'>\n                <input\n                    value={newName}\n                    onChange={(e) => setNewName(e.target.value)}\n                    type=\"text\"\n                />\n\n                <button type=\"button\" onClick={updateNodeHandler}>\n                    Обновить\n                </button>\n            </div>\n\n            <div className='Buttons'>\n\n\n\n\n                <button type=\"button\" onClick={onRestore}>\n                    Загрузить\n                </button>\n\n\n                {/* <div>\n                    <button onClick={openFile}>\n                        Загрузить ФАЙЛ\n                    </button>\n                    <input id=\"inp\" type='file'  onChange={(e) => readFile(e)}></input>\n                    <pre id=\"contents\"></pre>\n                </div> */}\n\n\n\n                <button type='button' onClick={onSave}>\n                    Сохранить состояние\n                </button>\n\n\n                <button type='button' onClick={exportToJson}>\n                    Сохранить\n                </button>\n            </div>\n\n        </div>\n    );\n};\n\nexport default () => (\n    <ReactFlowProvider>\n        <ReactFlowRenderer />\n    </ReactFlowProvider>\n);\n"]},"metadata":{},"sourceType":"module"}