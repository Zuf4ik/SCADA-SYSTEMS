{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438\\\\Scada-react-flow-main\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, Controls, useReactFlow } from 'react-flow-renderer';\nimport { nodeTypes } from './Nodes';\nimport styleConnect from './style-connect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = new WebSocket('ws://localhost:5000/');\n\nconst ReactFlowRenderer = () => {\n  _s();\n\n  const [elements, setElements] = useState([styleConnect]); // ------------------- Экспорт в Excel ------------------\n\n  const fileName = 'Scada';\n  const [name, setName] = useState(\"\");\n  const [activeNode, setActiveNode] = useState();\n  const [newName, setNewName] = useState(\"\");\n  const [instance, setInstance] = useState();\n  const [connected, setConnected] = useState(false);\n  const {\n    setViewport\n  } = useReactFlow();\n  useEffect(() => {\n    if (activeNode) setNewName(activeNode.data.label);\n  }, [activeNode]); // --------------- Удаление ---------------\n\n  const elementRemoveHandler = elementTobeRemoved => {\n    setElements(prev => removeElements(elementTobeRemoved, prev));\n  };\n\n  const flowKey = 'example-flow';\n\n  const connectHandler = params => {\n    setElements(els => addEdge({ ...params,\n      type: 'step',\n      style: {\n        stroke: 'red'\n      }\n    }, els));\n  }; // ----------------------- Добавление элементов --------------------------\n\n\n  const addRectangleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"rectangle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addCircleHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"circle\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addFlagHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"flag\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addControlUnit = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"controlunit\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // ------------------- Добавление независимой задвижки ----------------\n\n\n  const addIndGateValveHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"indgatevalve\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // ------------------- Добавление задвижки ----------------\n\n\n  const addGateValveHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalve\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerRight = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalveright\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerBot = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalvebot\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  };\n\n  const addGateValveHandlerLeft = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"gatevalveleft\",\n      position: {\n        x: -10,\n        y: 30\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // -----------------------------------\n\n\n  const addTextHandler = () => {\n    const newNode = {\n      id: `${Date.now()}`,\n      data: {\n        label: `${name}`\n      },\n      type: \"text\",\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    newNode.data = { ...newNode.data,\n      id: `${newNode.id}`\n    };\n    setElements(prev => {\n      return [...prev, newNode];\n    });\n    setName(\"\");\n  }; // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n  const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els)); // --------------- Приближении при двойном нажатии на мышь ---------------\n\n\n  const clickHandler = e => {\n    var htmlString = e.target.outerHTML.toString();\n    var index = htmlString.indexOf(` id=\"`);\n    index += 15;\n    const currentId = htmlString.substr(index, 13);\n    elements.forEach(_current => {\n      if (_current.id === currentId) {\n        setActiveNode(_current);\n      }\n    }); // setNewName(activeNode.data.label)\n  }; // --------------- Обновление текста ---------------\n\n\n  const updateNodeHandler = () => {\n    if (!activeNode) return;\n    setElements(elements.map(_current => {\n      if (_current.id === activeNode.id) {\n        return { ..._current,\n          data: {\n            label: newName,\n            id: _current.data.id\n          }\n        };\n      }\n\n      return _current;\n    }));\n  };\n\n  const onLoad = reactFlowInstance => {\n    setInstance(reactFlowInstance);\n    reactFlowInstance.fitView();\n  };\n\n  socket.onopen = () => {\n    setConnected(true);\n    console.log('подключено');\n  };\n  /*\n  socket.onmessage = (event) => {\n      console.log('есть сообщение')\n      const lineSignal = JSON.parse(event.data);\n      console.log(lineSignal);\n      let linedate = event.data;\n      console.log(linedate);\n      let json = JSON.stringify(linedate);\n      console.log(json);\n      let fileName = 'signal.json'\n       let fileToSave = new Blob([JSON.stringify(json, null, 4)], {\n          type: 'application/json',\n          name: fileName\n      })\n      saveAs (fileToSave, fileName);\n  }\n  */\n\n\n  socket.onmessage = event => {\n    let msg = JSON.parse(event.data);\n    console.log('есть сообщение');\n    console.log(msg);\n  };\n\n  const signalSocket = msg => {\n    console.log(signalSocket.msg);\n    console.log(signalSocket.msg);\n    console.log(signalSocket.msg);\n  }; //save pos\n\n\n  const saveChangesHandler = () => {\n    console.log(\"state\", instance.getElements()); //сохранение в локальное хранилище\n\n    localStorage.setItem('Position', JSON.stringify(instance.getElements())); //отправка json\n\n    let pos = JSON.stringify(instance.getElements());\n    socket.send(pos);\n  };\n\n  socket.onclose = function (event) {\n    if (event.wasClean) {\n      console.log('Соединение закрыто чисто');\n    } else {\n      console.log('Обрыв соединения');\n    }\n\n    console.log('Код: ' + event.code + ' причина: ' + event.reason);\n  };\n\n  socket.onerror = function (event) {\n    console.log(event);\n  }; // --------------- Сохранение ---------------\n\n\n  const onSave = useCallback(() => {\n    if (instance) {\n      const flow = instance.toObject();\n      localStorage.setItem(flow, JSON.stringify(flow));\n    }\n  }, [instance]); // --------------- Загрузка ---------------\n\n  const onRestore = useCallback(() => {\n    const restoreFlow = async () => {\n      const flow = JSON.parse(localStorage.getItem(flowKey));\n\n      if (flow) {\n        const {\n          x = 0,\n          y = 0,\n          zoom = 1\n        } = flow.viewport;\n        setElements(flow.elements || []);\n      }\n    };\n\n    restoreFlow();\n  }, [elements]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"75vh\",\n      width: \"75vw\",\n      border: \"1px solid black\",\n      marginLeft: \"12.5vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: elements,\n      onElementsRemove: elementRemoveHandler,\n      onConnect: connectHandler,\n      deleteKeyCode: 8 || 46,\n      onEdgeUpdate: edgeUpdateHandler,\n      nodeTypes: nodeTypes,\n      snapToGrid: true,\n      snapGrid: [16, 16],\n      connectionLineStyle: {\n        stroke: \"red\",\n        strokeWidth: 2\n      } // При двойном нажатии  на мышку приближает \n      ,\n      onDoubleClick: clickHandler,\n      onLoad: onLoad,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 15,\n        size: 2,\n        color: \"#c8c8c8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 399,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: name,\n        onChange: e => setName(e.target.value),\n        type: \"text\",\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0442\\u0435\\u043A\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addTextHandler,\n        children: \"\\u0422\\u0435\\u043A\\u0441\\u0442\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(ExportCSV, {\n          csvData: elements,\n          fileName: fileName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addIndGateValveHandler,\n        className: \"IndZadv\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandler,\n        className: \"Zadv\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerRight,\n        className: \"Zadv-Right\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerBot,\n        className: \"Zadv-Bot\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addGateValveHandlerLeft,\n        className: \"Zadv-Left\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\",\n          alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addRectangleHandler,\n        className: \"Cistern\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png\",\n          alt: \"\\u0426\\u0438\\u0441\\u0442\\u0435\\u0440\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addCircleHandler,\n        className: \"Regul\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\",\n          alt: \"\\u0420\\u0435\\u0433\\u0443\\u043B\\u044F\\u0442\\u043E\\u0440\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addFlagHandler,\n        className: \"Flaaag\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\",\n          alt: \"\\u0424\\u043B\\u0430\\u0433\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: addControlUnit,\n        className: \"Untitled\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\",\n          alt: \"Untitled\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: newName,\n        onChange: e => setNewName(e.target.value),\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: updateNodeHandler,\n        children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onRestore,\n        children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onSave,\n        children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 391,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactFlowRenderer, \"hY4f/djrmYtD8ZR9XmHDVv3f2Gk=\", false, function () {\n  return [useReactFlow];\n});\n\n_c = ReactFlowRenderer;\nexport default ReactFlowRenderer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactFlowRenderer\");","map":{"version":3,"sources":["E:/Загрузки/Scada-react-flow-main/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","useCallback","ExportCSV","ReactFlow","removeElements","updateEdge","addEdge","Background","Controls","useReactFlow","nodeTypes","styleConnect","socket","WebSocket","ReactFlowRenderer","elements","setElements","fileName","name","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","connected","setConnected","setViewport","data","label","elementRemoveHandler","elementTobeRemoved","prev","flowKey","connectHandler","params","els","type","style","stroke","addRectangleHandler","newNode","id","Date","now","position","x","y","addCircleHandler","addFlagHandler","addControlUnit","addIndGateValveHandler","addGateValveHandler","addGateValveHandlerRight","addGateValveHandlerBot","addGateValveHandlerLeft","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","e","htmlString","target","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","onopen","console","log","onmessage","event","msg","JSON","parse","signalSocket","saveChangesHandler","getElements","localStorage","setItem","stringify","pos","send","onclose","wasClean","code","reason","onerror","onSave","flow","toObject","onRestore","restoreFlow","getItem","zoom","viewport","height","width","border","marginLeft","strokeWidth","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\"\nimport ReactFlow, {\n    removeElements,\n    updateEdge,\n    addEdge,\n    Background,\n    Controls,\n    useReactFlow,\n} from 'react-flow-renderer';\n\nimport { nodeTypes } from './Nodes';\nimport styleConnect from './style-connect';\nconst socket = new WebSocket('ws://localhost:5000/')\n\nconst ReactFlowRenderer = () => {\n    const [elements, setElements] = useState([styleConnect]);\n\n\n    // ------------------- Экспорт в Excel ------------------\n\n    const fileName = 'Scada'\n    const [name, setName] = useState(\"\");\n    const [activeNode, setActiveNode] = useState();\n    const [newName, setNewName] = useState(\"\");\n    const [instance, setInstance] = useState();\n    const [connected, setConnected] = useState(false);\n    const { setViewport } = useReactFlow();\n\n    useEffect(() => {\n        if (activeNode) setNewName(activeNode.data.label);\n    }, [activeNode]);\n\n\n    // --------------- Удаление ---------------\n\n\n    const elementRemoveHandler = (elementTobeRemoved) => {\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\n    };\n\n\n    const flowKey = 'example-flow';\n\n    const connectHandler = (params) => {\n        setElements((els) =>\n            addEdge({ ...params, type: 'step', style: { stroke: 'red' } }, els))\n    };\n\n\n\n\n    // ----------------------- Добавление элементов --------------------------\n\n    const addRectangleHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"rectangle\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n    const addCircleHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"circle\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n    const addFlagHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"flag\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addControlUnit = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"controlunit\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // ------------------- Добавление независимой задвижки ----------------\n\n    const addIndGateValveHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"indgatevalve\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // ------------------- Добавление задвижки ----------------\n\n    const addGateValveHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalve\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerRight = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalveright\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerBot = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalvebot\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    const addGateValveHandlerLeft = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"gatevalveleft\",\n            position: {\n                x: -10,\n                y: 30\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // -----------------------------------\n\n    const addTextHandler = () => {\n        const newNode = {\n            id: `${Date.now()}`,\n            data: { label: `${name}` },\n            type: \"text\",\n            position: {\n                x: 0,\n                y: 0\n            }\n        };\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n        setElements((prev) => {\n            return [...prev, newNode];\n        });\n        setName(\"\");\n    };\n\n\n    // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n\n\n    // --------------- Приближении при двойном нажатии на мышь ---------------\n\n    const clickHandler = (e) => {\n        var htmlString = e.target.outerHTML.toString();\n        var index = htmlString.indexOf(` id=\"`);\n        index += 15;\n        const currentId = htmlString.substr(index, 13);\n\n        elements.forEach((_current) => {\n            if (_current.id === currentId) {\n                setActiveNode(_current);\n            }\n        });\n        // setNewName(activeNode.data.label)\n    };\n\n\n    // --------------- Обновление текста ---------------\n\n    const updateNodeHandler = () => {\n        if (!activeNode) return;\n        setElements(\n            elements.map((_current) => {\n                if (_current.id === activeNode.id) {\n                    return {\n                        ..._current,\n                        data: { label: newName, id: _current.data.id }\n                    };\n                }\n\n                return _current;\n            })\n        );\n    };\n\n\n    const onLoad = (reactFlowInstance) => {\n        setInstance(reactFlowInstance);\n        reactFlowInstance.fitView();\n    };\n\n    socket.onopen = () => {\n        setConnected(true);\n        console.log('подключено');\n    }\n\n    /*\n    socket.onmessage = (event) => {\n        console.log('есть сообщение')\n        const lineSignal = JSON.parse(event.data);\n        console.log(lineSignal);\n        let linedate = event.data;\n        console.log(linedate);\n        let json = JSON.stringify(linedate);\n        console.log(json);\n        let fileName = 'signal.json'\n\n        let fileToSave = new Blob([JSON.stringify(json, null, 4)], {\n            type: 'application/json',\n            name: fileName\n        })\n        saveAs (fileToSave, fileName);\n    }\n    */\n\n    socket.onmessage = (event) => {\n        let msg = JSON.parse(event.data);\n        console.log('есть сообщение')\n        console.log(msg);\n    };\n    const signalSocket = (msg) => {\n        console.log(signalSocket.msg);\n        console.log(signalSocket.msg);\n        console.log(signalSocket.msg);\n    }\n\n\n    //save pos\n    const saveChangesHandler = () => {\n        console.log(\"state\", instance.getElements());\n        //сохранение в локальное хранилище\n        localStorage.setItem('Position', JSON.stringify(instance.getElements()));\n        //отправка json\n        let pos = JSON.stringify(instance.getElements());\n        socket.send(pos);\n    }\n\n    socket.onclose = function (event) {\n        if (event.wasClean) {\n            console.log('Соединение закрыто чисто')\n        } else {\n            console.log('Обрыв соединения')\n        }\n        console.log('Код: ' + event.code + ' причина: ' + event.reason)\n    }\n\n    socket.onerror = function (event) {\n        console.log(event);\n    }\n\n\n        // --------------- Сохранение ---------------\n\n        const onSave = useCallback(() => {\n\n            if (instance) {\n                const flow = instance.toObject();\n                localStorage.setItem(flow, JSON.stringify(flow));\n            }\n        }, [instance]);\n    \n    \n    \n        // --------------- Загрузка ---------------\n    \n        const onRestore = useCallback(() => {\n            const restoreFlow = async () => {\n                const flow = JSON.parse(localStorage.getItem(flowKey));\n    \n                if (flow) {\n                    const { x = 0, y = 0, zoom = 1 } = flow.viewport;\n                    setElements(flow.elements || []);\n                    \n    \n                }\n            };\n            restoreFlow();\n        }, [elements]);\n\n\n\n\n    return (\n        <div\n            style={{\n                height: \"75vh\",\n                width: \"75vw\",\n                border: \"1px solid black\",\n                marginLeft: \"12.5vw\"\n            }}\n        >\n            <ReactFlow\n                elements={elements}\n                onElementsRemove={elementRemoveHandler}\n                onConnect={connectHandler}\n                deleteKeyCode={8 || 46}\n                onEdgeUpdate={edgeUpdateHandler}\n                nodeTypes={nodeTypes}\n                snapToGrid={true}\n                snapGrid={[16, 16]}\n                connectionLineStyle={{ stroke: \"red\", strokeWidth: 2 }}\n                // При двойном нажатии  на мышку приближает \n                onDoubleClick={clickHandler}\n                onLoad={onLoad}\n            >\n                <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\n                <Controls />\n            </ReactFlow>\n\n            <div className='Buttons'>\n                <input\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    type=\"text\"\n                    placeholder=\"Введите текст\"\n                />\n\n                <button type=\"button\" onClick={addTextHandler}>\n                    Текст\n                </button>\n\n                <button>\n                    <ExportCSV csvData={elements} fileName={fileName} />\n                </button>\n\n            </div>\n\n            <div className='Buttons'>\n\n\n                <button type=\"button\" onClick={addIndGateValveHandler} className=\"IndZadv\">\n                    <img src=\"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandler} className=\"Zadv\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerRight} className=\"Zadv-Right\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerBot} className=\"Zadv-Bot\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addGateValveHandlerLeft} className=\"Zadv-Left\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\" alt='Задвижка'></img>\n                </button>\n\n                <button type=\"button\" onClick={addRectangleHandler} className=\"Cistern\">\n                    <img src='https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png' alt='Цистерна'></img>\n                </button>\n\n\n                <button type=\"button\" onClick={addCircleHandler} className=\"Regul\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\" alt='Регулятор'></img>\n                </button>\n\n                <button type=\"button\" onClick={addFlagHandler} className=\"Flaaag\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\" alt='Флаг'></img>\n                </button>\n\n                <button type=\"button\" onClick={addControlUnit} className=\"Untitled\">\n                    <img src=\"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\" alt='Untitled'></img>\n                </button>\n            </div>\n\n            <div className='Buttons'>\n                <input\n                    value={newName}\n                    onChange={(e) => setNewName(e.target.value)}\n                    type=\"text\"\n                />\n\n                <button type=\"button\" onClick={updateNodeHandler}>\n                    Обновить\n                </button>\n            </div>\n\n            <div className='Buttons'>\n\n\n                <button type=\"button\" onClick={onRestore}>\n                    Загрузка\n                </button>\n\n                <button type=\"button\" onClick={onSave}>\n                    Сохранить\n                </button>\n\n            </div>\n\n        </div>\n    );\n};\n\nexport default ReactFlowRenderer;"]},"metadata":{},"sourceType":"module"}