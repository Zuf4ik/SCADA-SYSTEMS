{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438\\\\Scada-react-flow-main\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\LoadingJSON.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, Controls, ReactFlowProvider, useZoomPanHelper } from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport { nodeTypes } from './Nodes'; // const socket = new WebSocket('ws://localhost:5000/')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlocalforage.config({\n  name: 'react-flow-docs',\n  storeName: 'flows'\n});\n\nclass LoadingJson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n    this.handleFileSelect = this.handleFileSelect.bind(this);\n  }\n\n  displayData(content) {\n    this.setState({\n      data: content\n    });\n  }\n\n  handleFileSelect(evt) {\n    let files = evt.target.files;\n\n    if (!files.length) {\n      alert('Файл не выбран');\n      return;\n    }\n\n    let file = files[0];\n    let that = this;\n    let reader = new FileReader();\n\n    reader.onload = function (e) {\n      that.displayData(e.target.result);\n    };\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    var _s = $RefreshSig$();\n\n    const ReactFlowRenderer = props => {\n      _s();\n\n      // ------------------- Экспорт в Excel ------------------\n      const fileName = 'Scada';\n      const [loadingJson, setloadinJson] = useState(\"\");\n      const [name, setName] = useState(\"\");\n      const [activeNode, setActiveNode] = useState();\n      const [newName, setNewName] = useState(\"\");\n      const [instance, setInstance] = useState();\n      const {\n        transform\n      } = useZoomPanHelper();\n      const flowKey = 'example-flow';\n      useEffect(() => {\n        if (activeNode) setNewName(activeNode.data.label);\n      }, [activeNode]); // --------------- Сохранение в локальном хранилище ---------------\n\n      const onSave = useCallback(() => {\n        if (loadingJson) {\n          const flow = loadingJson.toObject();\n          localforage.setItem(flowKey, flow);\n          console.log(\"Объекты сохранены\");\n        }\n      }, [instance]); // --------------- Загрузка ---------------\n\n      const onRestore = useCallback(() => {\n        const restoreFlow = async () => {\n          const flow = await localforage.getItem(flowKey);\n\n          if (flow) {\n            const [x = 0, y = 0] = flow.position;\n            setElements(flow.elements || []);\n            transform({\n              x,\n              y,\n              zoom: flow.zoom || 0\n            });\n          }\n        };\n\n        restoreFlow();\n      }, [setElements, transform]); // --------------- Загрузка через локальный диск ---------------\n\n      const onLoadingJson = useCallback(() => {\n        const restoreFlow = async () => {\n          const flow = await JSON.parse(loadingJson);\n\n          if (flow) {\n            const [x = 0, y = 0] = flow.position;\n            setElements(flow.elements || []);\n            transform({\n              x,\n              y,\n              zoom: flow.zoom || 0\n            });\n          }\n        };\n\n        restoreFlow();\n      }, [setElements, transform]); // --------------- Сохранение через локальный диск ---------------\n\n      const exportToJson = () => {\n        let filename = \"Scada-systems.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          const blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], {\n            type: contentType\n          });\n          navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n          const a = document.createElement('a');\n          a.download = filename;\n          a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements, null, 1));\n          a.target = '_blank';\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n        }\n      }; // --------------- Удаление ---------------\n\n\n      const elementRemoveHandler = elementTobeRemoved => {\n        setElements(prev => removeElements(elementTobeRemoved, prev));\n      };\n\n      const connectHandler = params => {\n        setElements(els => addEdge({ ...params,\n          type: 'step',\n          style: {\n            stroke: 'red'\n          }\n        }, els));\n      }; // ----------------------- Добавление элементов --------------------------\n\n\n      const addRectangleHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"pump\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addCircleHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"circle\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addFlagHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"flag\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addControlUnit = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"controlunit\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // ------------------- Добавление независимой задвижки ----------------\n\n\n      const addIndGateValveHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"indgatevalve\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // ------------------- Добавление задвижки ----------------\n\n\n      const addGateValveHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalve\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerRight = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalveright\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerBot = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalvebot\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerLeft = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalveleft\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // -----------------------------------\n\n\n      const addTextHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"text\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n      const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els)); // --------------- Приближении при двойном нажатии на мышь ---------------\n\n\n      const clickHandler = e => {\n        var htmlString = e.target.outerHTML.toString();\n        var index = htmlString.indexOf(` id=\"`);\n        index += 15;\n        const currentId = htmlString.substr(index, 13);\n        elements.forEach(_current => {\n          if (_current.id === currentId) {\n            setActiveNode(_current);\n          }\n        }); // setNewName(activeNode.data.label)\n      }; // --------------- Обновление текста ---------------\n\n\n      const updateNodeHandler = () => {\n        if (!activeNode) return;\n        setElements(elements.map(_current => {\n          if (_current.id === activeNode.id) {\n            return { ..._current,\n              data: {\n                label: newName,\n                id: _current.data.id\n              }\n            };\n          }\n\n          return _current;\n        }));\n      };\n\n      const onLoad = reactFlowInstance => {\n        setInstance(reactFlowInstance);\n        reactFlowInstance.fitView();\n      }; // --------------- Сохранение через сервер ---------------\n      // //save pos\n      // const saveChangesHandler = () => {\n      //     console.log(\"state\", instance.getElements());\n      //     //отправка json\n      //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\n      //     var pos = JSON.stringify(instance.getElements());\n      //     socket.send(pos);\n      // };\n      // socket.onopen = () => {\n      //     console.log('подключено');\n      // }\n      // socket.onmessage = (event) => {\n      //     console.log('есть сообщение')\n      //     const dataSave = JSON.parse(JSON.stringify(event.data));\n      //     console.log(dataSave)\n      // }\n\n    };\n\n    _s(ReactFlowRenderer, \"+3uf0/CdlyswYfIKdb3g+lIKuGE=\", false, function () {\n      return [useZoomPanHelper];\n    });\n\n    const data = this.state.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: this.handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoadingJson; // export const exportConst = {\n//   dataJson: this.props.data\n// };","map":{"version":3,"sources":["E:/Загрузки/Scada-react-flow-main/react-flow_test/src/react-flow-renderer/LoadingJSON.jsx"],"names":["React","useState","useEffect","useCallback","ExportCSV","ReactFlow","removeElements","updateEdge","addEdge","Background","Controls","ReactFlowProvider","useZoomPanHelper","localforage","nodeTypes","config","name","storeName","LoadingJson","Component","constructor","props","state","data","handleFileSelect","bind","displayData","content","setState","evt","files","target","length","alert","file","that","reader","FileReader","onload","e","result","readAsText","render","ReactFlowRenderer","fileName","loadingJson","setloadinJson","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","transform","flowKey","label","onSave","flow","toObject","setItem","console","log","onRestore","restoreFlow","getItem","x","y","position","setElements","elements","zoom","onLoadingJson","JSON","parse","exportToJson","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","stringify","type","a","document","createElement","download","href","encodeURIComponent","body","appendChild","click","removeChild","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","els","style","stroke","addRectangleHandler","newNode","id","Date","now","addCircleHandler","addFlagHandler","addControlUnit","addIndGateValveHandler","addGateValveHandler","addGateValveHandlerRight","addGateValveHandlerBot","addGateValveHandlerLeft","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","htmlString","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { ExportCSV } from './ExportCSV ';\r\nimport \"./css/buttons_styles.css\"\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    Controls,\r\n    ReactFlowProvider,\r\n    useZoomPanHelper\r\n} from 'react-flow-renderer';\r\nimport localforage from 'localforage';\r\nimport { nodeTypes } from './Nodes';\r\n// const socket = new WebSocket('ws://localhost:5000/')\r\nlocalforage.config({\r\n    name: 'react-flow-docs',\r\n    storeName: 'flows',\r\n});\r\n\r\n\r\n\r\n class LoadingJson extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null\r\n    };\r\n    this.handleFileSelect = this.handleFileSelect.bind(this);\r\n  }\r\n\r\n  displayData(content) {\r\n    this.setState({ data: content });\r\n  }\r\n\r\n  handleFileSelect(evt) {\r\n    let files = evt.target.files;\r\n    if (!files.length) {\r\n      alert('Файл не выбран');\r\n      return;\r\n    }\r\n    let file = files[0];\r\n    let that = this;\r\n    let reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      that.displayData(e.target.result);\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const ReactFlowRenderer = (props) => {\r\n\r\n    // ------------------- Экспорт в Excel ------------------\r\n\r\n    const fileName = 'Scada'\r\n    const [loadingJson, setloadinJson] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n    const { transform } = useZoomPanHelper();\r\n\r\n    const flowKey = 'example-flow';\r\n\r\n    useEffect(() => {\r\n        if (activeNode) setNewName(activeNode.data.label);\r\n    }, [activeNode]);\r\n\r\n\r\n    // --------------- Сохранение в локальном хранилище ---------------\r\n\r\n    const onSave = useCallback(() => {\r\n\r\n        if (loadingJson) {\r\n            const flow = loadingJson.toObject();\r\n            localforage.setItem(flowKey, flow);\r\n            console.log(\"Объекты сохранены\")\r\n        }\r\n\r\n    }, [instance]);\r\n\r\n\r\n\r\n    // --------------- Загрузка ---------------\r\n\r\n    const onRestore = useCallback(() => {\r\n        const restoreFlow = async () => {\r\n            const flow = await localforage.getItem(flowKey);\r\n\r\n\r\n            if (flow) {\r\n                const [x = 0, y = 0] = flow.position;\r\n                setElements(flow.elements || []);\r\n                transform({ x, y, zoom: flow.zoom || 0 });\r\n            }\r\n\r\n        };\r\n        restoreFlow();\r\n    }, [setElements, transform]\r\n\r\n    );\r\n\r\n\r\n    // --------------- Загрузка через локальный диск ---------------\r\n\r\n    const onLoadingJson = useCallback(() => {\r\n        const restoreFlow = async () => {\r\n            const flow = await JSON.parse(loadingJson);\r\n\r\n\r\n            if (flow) {\r\n                const [x = 0, y = 0] = flow.position;\r\n                setElements(flow.elements || []);\r\n                transform({ x, y, zoom: flow.zoom || 0 });\r\n            }\r\n\r\n        };\r\n        restoreFlow();\r\n    }, [setElements, transform]\r\n\r\n    );\r\n\r\n    // --------------- Сохранение через локальный диск ---------------\r\n\r\n\r\n    const exportToJson = () => {\r\n        let filename = \"Scada-systems.json\";\r\n        let contentType = \"application/json;charset=utf-8;\";\r\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n            const blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], { type: contentType });\r\n            navigator.msSaveOrOpenBlob(blob, filename);\r\n        } else {\r\n            const a = document.createElement('a');\r\n            a.download = filename;\r\n            a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements, null, 1));\r\n            a.target = '_blank';\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n        }\r\n    }\r\n\r\n\r\n    // --------------- Удаление ---------------\r\n\r\n\r\n    const elementRemoveHandler = (elementTobeRemoved) => {\r\n        setElements((prev) => removeElements(elementTobeRemoved, prev));\r\n    };\r\n\r\n\r\n    const connectHandler = (params) => {\r\n        setElements((els) =>\r\n            addEdge({ ...params, type: 'step', style: { stroke: 'red' } }, els))\r\n    };\r\n\r\n\r\n\r\n\r\n    // ----------------------- Добавление элементов --------------------------\r\n\r\n    const addRectangleHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"pump\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addCircleHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"circle\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n    const addFlagHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"flag\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    const addControlUnit = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"controlunit\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    // ------------------- Добавление независимой задвижки ----------------\r\n\r\n    const addIndGateValveHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"indgatevalve\",\r\n            position: {\r\n                x: -10,\r\n                y: 30\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    // ------------------- Добавление задвижки ----------------\r\n\r\n    const addGateValveHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"gatevalve\",\r\n            position: {\r\n                x: -10,\r\n                y: 30\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    const addGateValveHandlerRight = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"gatevalveright\",\r\n            position: {\r\n                x: -10,\r\n                y: 30\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    const addGateValveHandlerBot = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"gatevalvebot\",\r\n            position: {\r\n                x: -10,\r\n                y: 30\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    const addGateValveHandlerLeft = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"gatevalveleft\",\r\n            position: {\r\n                x: -10,\r\n                y: 30\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n    // -----------------------------------\r\n\r\n    const addTextHandler = () => {\r\n        const newNode = {\r\n            id: `${Date.now()}`,\r\n            data: { label: `${name}` },\r\n            type: \"text\",\r\n            position: {\r\n                x: 0,\r\n                y: 0\r\n            }\r\n        };\r\n        newNode.data = { ...newNode.data, id: `${newNode.id}` };\r\n\r\n        setElements((prev) => {\r\n            return [...prev, newNode];\r\n        });\r\n        setName(\"\");\r\n    };\r\n\r\n\r\n\r\n\r\n    // --------------- Убрать, грубо говоря, линии с задвижки ---------------\r\n\r\n\r\n    const edgeUpdateHandler = (oldEdge, newConnection) =>\r\n        setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n\r\n\r\n    // --------------- Приближении при двойном нажатии на мышь ---------------\r\n\r\n    const clickHandler = (e) => {\r\n        var htmlString = e.target.outerHTML.toString();\r\n        var index = htmlString.indexOf(` id=\"`);\r\n        index += 15;\r\n        const currentId = htmlString.substr(index, 13);\r\n\r\n        elements.forEach((_current) => {\r\n            if (_current.id === currentId) {\r\n                setActiveNode(_current);\r\n            }\r\n        });\r\n        // setNewName(activeNode.data.label)\r\n    };\r\n\r\n\r\n    // --------------- Обновление текста ---------------\r\n\r\n    const updateNodeHandler = () => {\r\n        if (!activeNode) return;\r\n        setElements(\r\n            elements.map((_current) => {\r\n                if (_current.id === activeNode.id) {\r\n                    return {\r\n                        ..._current,\r\n                        data: { label: newName, id: _current.data.id }\r\n                    };\r\n                }\r\n\r\n                return _current;\r\n            })\r\n        );\r\n    };\r\n\r\n    const onLoad = (reactFlowInstance) => {\r\n        setInstance(reactFlowInstance);\r\n        reactFlowInstance.fitView();\r\n    };\r\n\r\n\r\n\r\n\r\n    // --------------- Сохранение через сервер ---------------\r\n\r\n\r\n    // //save pos\r\n    // const saveChangesHandler = () => {\r\n    //     console.log(\"state\", instance.getElements());\r\n    //     //отправка json\r\n\r\n    //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\r\n    //     var pos = JSON.stringify(instance.getElements());\r\n    //     socket.send(pos);\r\n    // };\r\n\r\n    // socket.onopen = () => {\r\n    //     console.log('подключено');\r\n    // }\r\n\r\n    // socket.onmessage = (event) => {\r\n    //     console.log('есть сообщение')\r\n    //     const dataSave = JSON.parse(JSON.stringify(event.data));\r\n    //     console.log(dataSave)\r\n    // }\r\n\r\n\r\n\r\n    }\r\n    const data = this.state.data;\r\n    return (\r\n      <div >\r\n        <input type=\"file\" onChange={this.handleFileSelect} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default LoadingJson ;\r\n\r\n\r\n// export const exportConst = {\r\n//   dataJson: this.props.data\r\n// };"]},"metadata":{},"sourceType":"module"}