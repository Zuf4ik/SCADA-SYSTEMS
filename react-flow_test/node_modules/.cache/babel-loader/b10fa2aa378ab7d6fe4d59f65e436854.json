{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438\\\\Scada-react-flow-main\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\index.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, Controls, ReactFlowProvider, useZoomPanHelper } from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport { nodeTypes } from './Nodes'; // const socket = new WebSocket('ws://localhost:5000/')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlocalforage.config({\n  name: 'react-flow-docs',\n  storeName: 'flows'\n});\nexport default class ReactFlowRenderer extends React.Component {\n  constructor() {\n    var _s = $RefreshSig$();\n\n    super(...arguments);\n    this.reactFlow = _s(() => {\n      _s();\n\n      const [elements, setElements] = useState([]); // ------------------- Экспорт в Excel ------------------\n\n      const fileName = 'Scada';\n      const [name, setName] = useState(\"\");\n      const [activeNode, setActiveNode] = useState();\n      const [newName, setNewName] = useState(\"\");\n      const [instance, setInstance] = useState();\n      const {\n        transform\n      } = useZoomPanHelper();\n      const flowKey = 'example-flow';\n      useEffect(() => {\n        if (activeNode) setNewName(activeNode.data.label);\n      }, [activeNode]); // --------------- Сохранение в локальном хранилище ---------------\n\n      const onSave = useCallback(() => {\n        if (instance) {\n          const flow = instance.toObject();\n          localforage.setItem(flowKey, flow);\n          console.log(\"Объекты сохранены\");\n        }\n      }, [instance]); // --------------- Загрузка ---------------\n\n      const onRestore = useCallback(() => {\n        const restoreFlow = async () => {\n          const flow = await localforage.getItem(flowKey);\n\n          if (flow) {\n            const [x = 0, y = 0] = flow.position;\n            setElements(flow.elements || []);\n            transform({\n              x,\n              y,\n              zoom: flow.zoom || 0\n            });\n          }\n        };\n\n        restoreFlow();\n      }, [setElements, transform]); // --------------- Загрузка через локальный диск ---------------\n      // --------------- Сохранение через локальный диск ---------------\n\n      const exportToJson = () => {\n        let filename = \"Scada-systems.json\";\n        let contentType = \"application/json;charset=utf-8;\";\n\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          const blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], {\n            type: contentType\n          });\n          navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n          const a = document.createElement('a');\n          a.download = filename;\n          a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements, null, 1));\n          a.target = '_blank';\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n        }\n      }; // --------------- Удаление ---------------\n\n\n      const elementRemoveHandler = elementTobeRemoved => {\n        setElements(prev => removeElements(elementTobeRemoved, prev));\n      };\n\n      const connectHandler = params => {\n        setElements(els => addEdge({ ...params,\n          type: 'step',\n          style: {\n            stroke: 'red'\n          }\n        }, els));\n      }; // ----------------------- Добавление элементов --------------------------\n\n\n      const addRectangleHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"pump\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addCircleHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"circle\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addFlagHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"flag\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addControlUnit = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"controlunit\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // ------------------- Добавление независимой задвижки ----------------\n\n\n      const addIndGateValveHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"indgatevalve\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // ------------------- Добавление задвижки ----------------\n\n\n      const addGateValveHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalve\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerRight = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalveright\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerBot = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalvebot\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      };\n\n      const addGateValveHandlerLeft = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"gatevalveleft\",\n          position: {\n            x: -10,\n            y: 30\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // -----------------------------------\n\n\n      const addTextHandler = () => {\n        const newNode = {\n          id: `${Date.now()}`,\n          data: {\n            label: `${name}`\n          },\n          type: \"text\",\n          position: {\n            x: 0,\n            y: 0\n          }\n        };\n        newNode.data = { ...newNode.data,\n          id: `${newNode.id}`\n        };\n        setElements(prev => {\n          return [...prev, newNode];\n        });\n        setName(\"\");\n      }; // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n      const edgeUpdateHandler = (oldEdge, newConnection) => setElements(els => updateEdge(oldEdge, newConnection, els)); // --------------- Приближении при двойном нажатии на мышь ---------------\n\n\n      const clickHandler = e => {\n        var htmlString = e.target.outerHTML.toString();\n        var index = htmlString.indexOf(` id=\"`);\n        index += 15;\n        const currentId = htmlString.substr(index, 13);\n        elements.forEach(_current => {\n          if (_current.id === currentId) {\n            setActiveNode(_current);\n          }\n        }); // setNewName(activeNode.data.label)\n      }; // --------------- Обновление текста ---------------\n\n\n      const updateNodeHandler = () => {\n        if (!activeNode) return;\n        setElements(elements.map(_current => {\n          if (_current.id === activeNode.id) {\n            return { ..._current,\n              data: {\n                label: newName,\n                id: _current.data.id\n              }\n            };\n          }\n\n          return _current;\n        }));\n      };\n\n      const onLoad = reactFlowInstance => {\n        setInstance(reactFlowInstance);\n        reactFlowInstance.fitView();\n      }; // --------------- Сохранение через сервер ---------------\n      // //save pos\n      // const saveChangesHandler = () => {\n      //     console.log(\"state\", instance.getElements());\n      //     //отправка json\n      //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\n      //     var pos = JSON.stringify(instance.getElements());\n      //     socket.send(pos);\n      // };\n      // socket.onopen = () => {\n      //     console.log('подключено');\n      // }\n      // socket.onmessage = (event) => {\n      //     console.log('есть сообщение')\n      //     const dataSave = JSON.parse(JSON.stringify(event.data));\n      //     console.log(dataSave)\n      // }\n\n    }, \"vFXcmnYGPVXaQ3knY8wMO2PG8Rs=\", false, function () {\n      return [useZoomPanHelper];\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: \"75vh\",\n        width: \"75vw\",\n        border: \"1px solid black\",\n        marginLeft: \"14.7em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        elements: elements,\n        onElementsRemove: elementRemoveHandler,\n        onConnect: connectHandler,\n        deleteKeyCode: 8 || 46,\n        onEdgeUpdate: edgeUpdateHandler,\n        nodeTypes: nodeTypes,\n        snapToGrid: true,\n        snapGrid: [16, 16],\n        connectionLineStyle: {\n          stroke: \"red\",\n          type: 'step',\n          strokeWidth: 2\n        } // При двойном нажатии  на мышку приближает \n        ,\n        onDoubleClick: clickHandler,\n        onLoad: onLoad,\n        children: [/*#__PURE__*/_jsxDEV(Background, {\n          variant: \"dots\",\n          gap: 15,\n          size: 2,\n          color: \"#c8c8c8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: name,\n          onChange: e => setName(e.target.value),\n          type: \"text\",\n          placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0442\\u0435\\u043A\\u0441\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addTextHandler,\n          children: \"\\u0422\\u0435\\u043A\\u0441\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(ExportCSV, {\n            csvData: elements,\n            fileName: fileName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addIndGateValveHandler,\n          className: \"IndZadv\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\",\n            alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addGateValveHandler,\n          className: \"Zadv\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\",\n            alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addGateValveHandlerRight,\n          className: \"Zadv-Right\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\",\n            alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addGateValveHandlerBot,\n          className: \"Zadv-Bot\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\",\n            alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addGateValveHandlerLeft,\n          className: \"Zadv-Left\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\",\n            alt: \"\\u0417\\u0430\\u0434\\u0432\\u0438\\u0436\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addRectangleHandler,\n          className: \"Cistern\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png\",\n            alt: \"\\u0426\\u0438\\u0441\\u0442\\u0435\\u0440\\u043D\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addCircleHandler,\n          className: \"Regul\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\",\n            alt: \"\\u0420\\u0435\\u0433\\u0443\\u043B\\u044F\\u0442\\u043E\\u0440\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addFlagHandler,\n          className: \"Flaaag\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\",\n            alt: \"\\u0424\\u043B\\u0430\\u0433\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: addControlUnit,\n          className: \"Untitled\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\",\n            alt: \"Untitled\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: e => setNewName(e.target.value),\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: updateNodeHandler,\n          children: \"\\u041E\\u0431\\u043D\\u043E\\u0432\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          multiple: \"multiple\",\n          id: \"file\",\n          onChange: this.fileUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.files.map((file, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: file.name\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 63\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: onSave,\n          children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0441\\u043E\\u0441\\u0442\\u043E\\u044F\\u043D\\u0438\\u0435\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: exportToJson,\n          children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n;","map":{"version":3,"sources":["E:/Загрузки/Scada-react-flow-main/react-flow_test/src/react-flow-renderer/index.jsx"],"names":["React","useState","useEffect","useCallback","ExportCSV","ReactFlow","removeElements","updateEdge","addEdge","Background","Controls","ReactFlowProvider","useZoomPanHelper","localforage","nodeTypes","config","name","storeName","ReactFlowRenderer","Component","reactFlow","elements","setElements","fileName","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","transform","flowKey","data","label","onSave","flow","toObject","setItem","console","log","onRestore","restoreFlow","getItem","x","y","position","zoom","exportToJson","filename","contentType","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","JSON","stringify","type","a","document","createElement","download","href","encodeURIComponent","target","body","appendChild","click","removeChild","elementRemoveHandler","elementTobeRemoved","prev","connectHandler","params","els","style","stroke","addRectangleHandler","newNode","id","Date","now","addCircleHandler","addFlagHandler","addControlUnit","addIndGateValveHandler","addGateValveHandler","addGateValveHandlerRight","addGateValveHandlerBot","addGateValveHandlerLeft","addTextHandler","edgeUpdateHandler","oldEdge","newConnection","clickHandler","e","htmlString","outerHTML","toString","index","indexOf","currentId","substr","forEach","_current","updateNodeHandler","map","onLoad","reactFlowInstance","fitView","render","height","width","border","marginLeft","strokeWidth","value","fileUpload","state","files","file","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\"\nimport ReactFlow, {\n    removeElements,\n    updateEdge,\n    addEdge,\n    Background,\n    Controls,\n    ReactFlowProvider,\n    useZoomPanHelper\n} from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport { nodeTypes } from './Nodes';\n// const socket = new WebSocket('ws://localhost:5000/')\n\nlocalforage.config({\n    name: 'react-flow-docs',\n    storeName: 'flows',\n});\n\n\n\n\n\nexport default class ReactFlowRenderer extends React.Component {\n\n\n     reactFlow = (() => {\n\n\n\n        const [elements, setElements] = useState([]);\n\n\n\n        // ------------------- Экспорт в Excel ------------------\n\n        const fileName = 'Scada'\n\n        const [name, setName] = useState(\"\");\n        const [activeNode, setActiveNode] = useState();\n        const [newName, setNewName] = useState(\"\");\n        const [instance, setInstance] = useState();\n        const { transform } = useZoomPanHelper();\n\n\n        const flowKey = 'example-flow';\n\n        useEffect(() => {\n            if (activeNode) setNewName(activeNode.data.label);\n        }, [activeNode]);\n\n\n        // --------------- Сохранение в локальном хранилище ---------------\n\n        const onSave = useCallback(() => {\n\n            if (instance) {\n                const flow = instance.toObject();\n                localforage.setItem(flowKey, flow);\n                console.log(\"Объекты сохранены\")\n            }\n\n        }, [instance]);\n\n\n\n        // --------------- Загрузка ---------------\n\n        const onRestore = useCallback(() => {\n            const restoreFlow = async () => {\n                const flow = await localforage.getItem(flowKey);\n\n\n                if (flow) {\n                    const [x = 0, y = 0] = flow.position;\n                    setElements(flow.elements || []);\n                    transform({ x, y, zoom: flow.zoom || 0 });\n                }\n\n            };\n            restoreFlow();\n        }, [setElements, transform]\n\n        );\n\n\n        // --------------- Загрузка через локальный диск ---------------\n\n\n\n      \n\n        // --------------- Сохранение через локальный диск ---------------\n\n\n        const exportToJson = () => {\n            let filename = \"Scada-systems.json\";\n            let contentType = \"application/json;charset=utf-8;\";\n            if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n                const blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(elements)))], { type: contentType });\n                navigator.msSaveOrOpenBlob(blob, filename);\n            } else {\n                const a = document.createElement('a');\n                a.download = filename;\n                a.href = 'data:' + contentType + ',' + encodeURIComponent(JSON.stringify(elements, null, 1));\n                a.target = '_blank';\n                document.body.appendChild(a);\n                a.click();\n                document.body.removeChild(a);\n            }\n        }\n\n\n        // --------------- Удаление ---------------\n\n\n        const elementRemoveHandler = (elementTobeRemoved) => {\n            setElements((prev) => removeElements(elementTobeRemoved, prev));\n        };\n\n\n        const connectHandler = (params) => {\n            setElements((els) =>\n                addEdge({ ...params, type: 'step', style: { stroke: 'red' } }, els))\n        };\n\n\n\n\n        // ----------------------- Добавление элементов --------------------------\n\n        const addRectangleHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"pump\",\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n        const addCircleHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"circle\",\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n        const addFlagHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"flag\",\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        const addControlUnit = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"controlunit\",\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        // ------------------- Добавление независимой задвижки ----------------\n\n        const addIndGateValveHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"indgatevalve\",\n                position: {\n                    x: -10,\n                    y: 30\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        // ------------------- Добавление задвижки ----------------\n\n        const addGateValveHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"gatevalve\",\n                position: {\n                    x: -10,\n                    y: 30\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        const addGateValveHandlerRight = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"gatevalveright\",\n                position: {\n                    x: -10,\n                    y: 30\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        const addGateValveHandlerBot = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"gatevalvebot\",\n                position: {\n                    x: -10,\n                    y: 30\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        const addGateValveHandlerLeft = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"gatevalveleft\",\n                position: {\n                    x: -10,\n                    y: 30\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n        // -----------------------------------\n\n        const addTextHandler = () => {\n            const newNode = {\n                id: `${Date.now()}`,\n                data: { label: `${name}` },\n                type: \"text\",\n                position: {\n                    x: 0,\n                    y: 0\n                }\n            };\n            newNode.data = { ...newNode.data, id: `${newNode.id}` };\n\n            setElements((prev) => {\n                return [...prev, newNode];\n            });\n            setName(\"\");\n        };\n\n\n\n\n        // --------------- Убрать, грубо говоря, линии с задвижки ---------------\n\n\n        const edgeUpdateHandler = (oldEdge, newConnection) =>\n            setElements((els) => updateEdge(oldEdge, newConnection, els));\n\n\n\n        // --------------- Приближении при двойном нажатии на мышь ---------------\n\n        const clickHandler = (e) => {\n            var htmlString = e.target.outerHTML.toString();\n            var index = htmlString.indexOf(` id=\"`);\n            index += 15;\n            const currentId = htmlString.substr(index, 13);\n\n            elements.forEach((_current) => {\n                if (_current.id === currentId) {\n                    setActiveNode(_current);\n                }\n            });\n            // setNewName(activeNode.data.label)\n        };\n\n\n        // --------------- Обновление текста ---------------\n\n        const updateNodeHandler = () => {\n            if (!activeNode) return;\n            setElements(\n                elements.map((_current) => {\n                    if (_current.id === activeNode.id) {\n                        return {\n                            ..._current,\n                            data: { label: newName, id: _current.data.id }\n                        };\n                    }\n\n                    return _current;\n                })\n            );\n        };\n\n        const onLoad = (reactFlowInstance) => {\n            setInstance(reactFlowInstance);\n            reactFlowInstance.fitView();\n        };\n\n\n\n\n        // --------------- Сохранение через сервер ---------------\n\n\n        // //save pos\n        // const saveChangesHandler = () => {\n        //     console.log(\"state\", instance.getElements());\n        //     //отправка json\n\n        //     localStorage.setItem('state', JSON.stringify(instance.getElements()));\n        //     var pos = JSON.stringify(instance.getElements());\n        //     socket.send(pos);\n        // };\n\n        // socket.onopen = () => {\n        //     console.log('подключено');\n        // }\n\n        // socket.onmessage = (event) => {\n        //     console.log('есть сообщение')\n        //     const dataSave = JSON.parse(JSON.stringify(event.data));\n        //     console.log(dataSave)\n        // }\n\n    \n}\n)\n\n\n    render() {\n\n\n\n        return (\n            <div\n                style={{\n                    height: \"75vh\",\n                    width: \"75vw\",\n                    border: \"1px solid black\",\n                    marginLeft: \"14.7em\"\n                }}\n            >\n                <ReactFlow\n                    elements={elements}\n                    onElementsRemove={elementRemoveHandler}\n                    onConnect={connectHandler}\n                    deleteKeyCode={8 || 46}\n                    onEdgeUpdate={edgeUpdateHandler}\n                    nodeTypes={nodeTypes}\n                    snapToGrid={true}\n                    snapGrid={[16, 16]}\n                    connectionLineStyle={{ stroke: \"red\", type: 'step', strokeWidth: 2 }}\n                    // При двойном нажатии  на мышку приближает \n                    onDoubleClick={clickHandler}\n                    onLoad={onLoad}\n                >\n                    <Background variant=\"dots\" gap={15} size={2} color=\"#c8c8c8\" />\n\n                    <Controls />\n                </ReactFlow>\n\n                <div className='Buttons'>\n                    <input\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        type=\"text\"\n                        placeholder=\"Введите текст\"\n                    />\n\n                    <button type=\"button\" onClick={addTextHandler}>\n                        Текст\n                    </button>\n\n                    <button >\n                        <ExportCSV csvData={elements} fileName={fileName} />\n                    </button>\n\n                </div>\n\n                <div className='Buttons'>\n\n\n                    <button type=\"button\" onClick={addIndGateValveHandler} className=\"IndZadv\">\n                        <img src=\"https://cdn.discordapp.com/attachments/565406946354528268/955394073412395008/5da0c98245011949.png\" alt='Задвижка'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addGateValveHandler} className=\"Zadv\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138797417414656/9fe81764ae11e11a.png\" alt='Задвижка'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addGateValveHandlerRight} className=\"Zadv-Right\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955147487713325096/e985402b7a23f9ac.png\" alt='Задвижка'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addGateValveHandlerBot} className=\"Zadv-Bot\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955151784907784202/a0416a67cfa4061c.png\" alt='Задвижка'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addGateValveHandlerLeft} className=\"Zadv-Left\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955153077592281190/5bf4af1de854e78a.png\" alt='Задвижка'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addRectangleHandler} className=\"Cistern\">\n                        <img src='https://media.discordapp.net/attachments/565406946354528268/955140552184180757/4f9d807774b88b0e.png' alt='Цистерна'></img>\n                    </button>\n\n\n                    <button type=\"button\" onClick={addCircleHandler} className=\"Regul\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138925733769337/20c16b7fc40cbf81.png\" alt='Регулятор'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addFlagHandler} className=\"Flaaag\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955138926069309460/c07fc1d24613f6c7.png\" alt='Флаг'></img>\n                    </button>\n\n                    <button type=\"button\" onClick={addControlUnit} className=\"Untitled\">\n                        <img src=\"https://media.discordapp.net/attachments/565406946354528268/955141072663748659/44f946ecc1121201.png\" alt='Untitled'></img>\n                    </button>\n                </div>\n\n                <div className='Buttons'>\n                    <input\n                        value={newName}\n                        onChange={(e) => setNewName(e.target.value)}\n                        type=\"text\"\n                    />\n\n                    <button type=\"button\" onClick={updateNodeHandler}>\n                        Обновить\n                    </button>\n                </div>\n\n                <div className='Buttons'>\n\n                    <span>Загрузить</span>\n                    <input type=\"file\" multiple=\"multiple\" id=\"file\" onChange={this.fileUpload} />\n                    <ul>\n                        {\n                            this.state.files.map((file, i) => <li key={i}>{file.name}</li>)\n                        }\n                    </ul>\n\n\n                    <button type='button' onClick={onSave}>\n                        Сохранить состояние\n                    </button>\n\n\n                    <button type='button' onClick={exportToJson}>\n                        Сохранить\n                    </button>\n                </div>\n\n            </div>\n        );\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}