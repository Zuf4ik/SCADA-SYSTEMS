{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438\\\\Scada-react-flow-main\\\\react-flow_test\\\\src\\\\react-flow-renderer\\\\LoadingJSON.jsx\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ExportCSV } from './ExportCSV ';\nimport \"./css/buttons_styles.css\";\nimport ReactFlow, { removeElements, updateEdge, addEdge, Background, Controls, ReactFlowProvider, useZoomPanHelper } from 'react-flow-renderer';\nimport localforage from 'localforage';\nimport { nodeTypes } from './Nodes'; // const socket = new WebSocket('ws://localhost:5000/')\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlocalforage.config({\n  name: 'react-flow-docs',\n  storeName: 'flows'\n});\n\nclass LoadingJson extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null\n    };\n    this.handleFileSelect = this.handleFileSelect.bind(this);\n  }\n\n  displayData(content) {\n    this.setState({\n      data: content\n    });\n  }\n\n  handleFileSelect(evt) {\n    let files = evt.target.files;\n\n    if (!files.length) {\n      alert('Файл не выбран');\n      return;\n    }\n\n    let file = files[0];\n    let that = this;\n    let reader = new FileReader();\n\n    reader.onload = function (e) {\n      that.displayData(e.target.result);\n    };\n\n    reader.readAsText(file);\n  }\n\n  render() {\n    var _s = $RefreshSig$();\n\n    const ReactFlowRenderer = props => {\n      _s();\n\n      // ------------------- Экспорт в Excel ------------------\n      const fileName = 'Scada';\n      const [loadingJson, setloadinJson] = useState(\"\");\n      const [name, setName] = useState(\"\");\n      const [activeNode, setActiveNode] = useState();\n      const [newName, setNewName] = useState(\"\");\n      const [instance, setInstance] = useState();\n      const {\n        transform\n      } = useZoomPanHelper();\n    };\n\n    _s(ReactFlowRenderer, \"PzZNUKuNTiAB9ReVIFGAQFtSwjw=\", false, function () {\n      return [useZoomPanHelper];\n    });\n\n    const data = this.state.data;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: this.handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default LoadingJson; // export const exportConst = {\n//   dataJson: this.props.data\n// };","map":{"version":3,"sources":["E:/Загрузки/Scada-react-flow-main/react-flow_test/src/react-flow-renderer/LoadingJSON.jsx"],"names":["React","useState","useEffect","useCallback","ExportCSV","ReactFlow","removeElements","updateEdge","addEdge","Background","Controls","ReactFlowProvider","useZoomPanHelper","localforage","nodeTypes","config","name","storeName","LoadingJson","Component","constructor","props","state","data","handleFileSelect","bind","displayData","content","setState","evt","files","target","length","alert","file","that","reader","FileReader","onload","e","result","readAsText","render","ReactFlowRenderer","fileName","loadingJson","setloadinJson","setName","activeNode","setActiveNode","newName","setNewName","instance","setInstance","transform"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAO,0BAAP;AACA,OAAOC,SAAP,IACIC,cADJ,EAEIC,UAFJ,EAGIC,OAHJ,EAIIC,UAJJ,EAKIC,QALJ,EAMIC,iBANJ,EAOIC,gBAPJ,QAQO,qBARP;AASA,OAAOC,WAAP,MAAwB,aAAxB;AACA,SAASC,SAAT,QAA0B,SAA1B,C,CACA;;;AACAD,WAAW,CAACE,MAAZ,CAAmB;AACfC,EAAAA,IAAI,EAAE,iBADS;AAEfC,EAAAA,SAAS,EAAE;AAFI,CAAnB;;AAOC,MAAMC,WAAN,SAA0BlB,KAAK,CAACmB,SAAhC,CAA0C;AACzCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,QAAL,CAAc;AAAEL,MAAAA,IAAI,EAAEI;AAAR,KAAd;AACD;;AAEDH,EAAAA,gBAAgB,CAACK,GAAD,EAAM;AACpB,QAAIC,KAAK,GAAGD,GAAG,CAACE,MAAJ,CAAWD,KAAvB;;AACA,QAAI,CAACA,KAAK,CAACE,MAAX,EAAmB;AACjBC,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD;;AACD,QAAIC,IAAI,GAAGJ,KAAK,CAAC,CAAD,CAAhB;AACA,QAAIK,IAAI,GAAG,IAAX;AACA,QAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAAUC,CAAV,EAAa;AAC3BJ,MAAAA,IAAI,CAACT,WAAL,CAAiBa,CAAC,CAACR,MAAF,CAASS,MAA1B;AACD,KAFD;;AAGAJ,IAAAA,MAAM,CAACK,UAAP,CAAkBP,IAAlB;AACD;;AAKDQ,EAAAA,MAAM,GAAG;AAAA;;AAEP,UAAMC,iBAAiB,GAAItB,KAAD,IAAW;AAAA;;AAErC;AAEA,YAAMuB,QAAQ,GAAG,OAAjB;AACA,YAAM,CAACC,WAAD,EAAcC,aAAd,IAA+B7C,QAAQ,CAAC,EAAD,CAA7C;AACA,YAAM,CAACe,IAAD,EAAO+B,OAAP,IAAkB9C,QAAQ,CAAC,EAAD,CAAhC;AACA,YAAM,CAAC+C,UAAD,EAAaC,aAAb,IAA8BhD,QAAQ,EAA5C;AACA,YAAM,CAACiD,OAAD,EAAUC,UAAV,IAAwBlD,QAAQ,CAAC,EAAD,CAAtC;AACA,YAAM,CAACmD,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,EAAxC;AACA,YAAM;AAAEqD,QAAAA;AAAF,UAAgB1C,gBAAgB,EAAtC;AAGC,KAbD;;AAFO,OAED+B,iBAFC;AAAA,cAYe/B,gBAZf;AAAA;;AAgBP,UAAMW,IAAI,GAAG,KAAKD,KAAL,CAAWC,IAAxB;AACA,wBACE;AAAA,6BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAKC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AArDwC;;AAyD3C,eAAeN,WAAf,C,CAGA;AACA;AACA","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { ExportCSV } from './ExportCSV ';\r\nimport \"./css/buttons_styles.css\"\r\nimport ReactFlow, {\r\n    removeElements,\r\n    updateEdge,\r\n    addEdge,\r\n    Background,\r\n    Controls,\r\n    ReactFlowProvider,\r\n    useZoomPanHelper\r\n} from 'react-flow-renderer';\r\nimport localforage from 'localforage';\r\nimport { nodeTypes } from './Nodes';\r\n// const socket = new WebSocket('ws://localhost:5000/')\r\nlocalforage.config({\r\n    name: 'react-flow-docs',\r\n    storeName: 'flows',\r\n});\r\n\r\n\r\n\r\n class LoadingJson extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: null\r\n    };\r\n    this.handleFileSelect = this.handleFileSelect.bind(this);\r\n  }\r\n\r\n  displayData(content) {\r\n    this.setState({ data: content });\r\n  }\r\n\r\n  handleFileSelect(evt) {\r\n    let files = evt.target.files;\r\n    if (!files.length) {\r\n      alert('Файл не выбран');\r\n      return;\r\n    }\r\n    let file = files[0];\r\n    let that = this;\r\n    let reader = new FileReader();\r\n    reader.onload = function (e) {\r\n      that.displayData(e.target.result);\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\n    const ReactFlowRenderer = (props) => {\r\n\r\n    // ------------------- Экспорт в Excel ------------------\r\n\r\n    const fileName = 'Scada'\r\n    const [loadingJson, setloadinJson] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [activeNode, setActiveNode] = useState();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [instance, setInstance] = useState();\r\n    const { transform } = useZoomPanHelper();\r\n\r\n\r\n    }\r\n    const data = this.state.data;\r\n    return (\r\n      <div >\r\n        <input type=\"file\" onChange={this.handleFileSelect} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default LoadingJson ;\r\n\r\n\r\n// export const exportConst = {\r\n//   dataJson: this.props.data\r\n// };"]},"metadata":{},"sourceType":"module"}